#!/usr/bin/env python
from dataclasses import dataclass, fields
from shutil import rmtree
from sys import exit, platform
from os import path, environ
from argparse import ArgumentParser
from subprocess import run, call

# [Adding New Arguments]
# Add a new property to the @dataclass. Make
# sure it has a type associated with it.
@dataclass
class Args:
  home: str = ".dotfiles"
  lang: str = "go"
  dev: bool = False

class Installation:
  # System architectures that are supported.
  # These should be based on what sys.platform
  # supports.
  platforms = ["linux", "darwin"]

  # What repo to clone, when needing to
  # pull the dotfiles.
  repo = "https://github.com/jgttech/dotfiles.v2.git"

  # Where the home directory should be
  # to install the dotfiles.
  home = environ["HOME"]

  # Args used for the installation. These are
  # not type bound because this is just an install
  # script. Setup happens once the repo is downloaded
  # and the downloaded setup scripts are called.
  args: Args

  # Dependencies that are required
  # to install the dotfiles.
  dependencies: list[str]

  # The data of the dotfiles we are trying to install.
  # This is set when we are checking the system to
  # determine if we can install the dotfiles.
  dotfiles_home = ""
  dotfiles_exists = False

  # This is used to keep track of which language the
  # dotfiles will be installed with. By default
  # this is "go". The options are the language names
  # within the "tools" directory. The name of the
  # directory is the name of the language option.
  tools_home = ""
  tools_exists = False

  def __init__(self, dependencies: list[str]) -> None:
    parser = ArgumentParser(description="Dotfiles install script")

    for field in fields(Args):
      field_name = field.name
      field_type = field.type
      field_abbr = field_name[0].capitalize()
      field_default = field.default

      if field_type == bool:
        parser.add_argument(
          f"-{field_abbr}",
          f"--{field_name}",
          action='store_true',
          help=f"Enable {field_name}",
          default=field_default
        )
      else:
        parser.add_argument(
          f"-{field_abbr}",
          f"--{field_name}",
          type=field_type,
          help=f"{field_name} value",
          default=field_default
        )

    self.args = Args(**vars(parser.parse_args()))
    self.dependencies = dependencies
    self.dependencies.append(self.args.lang)

  # Check is a package is installed. Returns
  # boolean True if it is, otherwise False.
  def installed(self, pkg: str) -> bool:
    return not bool(run(
      f"zsh -i -c \"which {pkg}\"",
      shell=True,
      capture_output=True
    ).returncode)

  def check_platform(self):
    if platform not in self.platforms:
      print(f"Unsupported system: {platform}")
      exit(1)

  def check_packages(self):
    missing: list[str] = []

    # Add the language to the dependencies.
    self.dependencies.append(self.args.lang)

    # Check for missing system dependencies.
    for dep in self.dependencies:
      if not self.installed(dep):
        missing.append(dep)

    # If there are missing system dependencies
    # then we can't install the dotfiles.
    if len(missing):
      print("Missing required dependencies:")
      for dep in missing:
        print(f"  {dep}")
      exit(1)

  def check_system(self):
    # Dotfiles status.
    self.dotfiles_home = path.join(self.home, self.args.home)
    self.dotfiles_exists = path.exists(self.dotfiles_home)

    # Tools language install status.
    self.tools_home = path.join(self.dotfiles_home, "tools", self.args.lang)
    self.tools_exists = path.exists(self.tools_home)

  def clone(self):
    # If there is no installation (and we are not
    # running in development) clone the repo into
    # the dotfiles path. Otherwise, if it does exist
    # pull the latest, to make sure we are working
    # with the latest version.
    if not self.args.dev:
      if not self.dotfiles_exists:
        call(f"git clone {self.repo} {self.dotfiles_home}", shell=True)
      else:
        call(f"git pull", shell=True, cwd=self.dotfiles_home)

  # Verify installation of dotfiles and language
  # the tools will be installed using.
  def verify(self):
    if not self.dotfiles_exists:
      print(f"Unable to install dotfiles: {self.dotfiles_home}")
      exit(1)

    if not self.tools_exists:
      if not self.args.dev and self.dotfiles_exists:
        rmtree(self.dotfiles_home, ignore_errors=True)

      print(f"Unsupported language: {self.args.lang}")
      exit(1)

if __name__ == "__main__":
  install = Installation(dependencies=["git", "jq", "stow", "omz", "nvm"])

  install.check_platform()
  install.check_packages()
  install.check_system()
  install.clone()
  install.verify()

  setup_path = path.join(install.dotfiles_home, "bin/setup")

  dev = install.args.dev
  lang = install.args.lang
  home = install.args.home

  cmd = ["python ."]

  if dev:
    cmd.append("--dev")

  if lang != "":
    cmd.append(f"--lang={lang}")

  if home != "":
    cmd.append(f"--home={home}")

  print(" ".join(cmd))
  call(" ".join(cmd), shell=True, cwd=setup_path)
