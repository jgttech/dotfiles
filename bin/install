#!/usr/bin/env python
from shutil import rmtree
from sys import exit, platform
from os import path, environ
from argparse import ArgumentParser
from subprocess import run, call

def installed(pkg: str) -> bool:
  return not bool(run(f"zsh -i -c \"which {pkg}\"", shell=True, capture_output=True).returncode)

parser = ArgumentParser(description="Dotfiles install script")
parser.add_argument("-D", "--dev", action="store_true", dest='dev', default=False)
parser.add_argument("-L", "--lang", action="store", dest="lang", default="go")
parser.add_argument("-H", "--home", action="store", dest="home", default=".dotfiles")

if __name__ == "__main__":
  ARCHS=["linux", "darwin"]

  if platform not in ARCHS:
    print(f"Unsupported system: {platform}")
    exit(1)

  HOME = environ["HOME"]
  ARGS = parser.parse_args()
  REPO="https://github.com/jgttech/dotfiles.v2.git"
  DEPS=["git", "jq", "stow", "omz", "nvm", ARGS.lang]
  MISSING=[]

  dotfiles_path = path.join(HOME, ARGS.home)
  dotfiles_exists = path.exists(dotfiles_path)

  # Check for missing system dependencies.
  for dep in DEPS:
    if not installed(dep):
      MISSING.append(dep)

  # If there are missing system dependencies
  # then we can't install the dotfiles.
  if len(MISSING):
    print("Missing required dependencies:")
    for dep in MISSING:
      print(f"  {dep}")
    exit(1)

  # If there is no installation (and we are not
  # running in development) clone the repo into
  # the dotfiles path. Otherwise, if it does exist
  # pull the latest, to make sure we are working
  # with the latest version.
  if not ARGS.dev:
    if not dotfiles_exists:
      call(f"git clone {REPO} {dotfiles_path}", shell=True)
    else:
      call(f"git pull", shell=True, cwd=dotfiles_path)

  if not dotfiles_exists:
    print(f"Unable to install dotfiles: {dotfiles_path}")
    exit(1)

  tools_path = path.join(dotfiles_path, "tools", ARGS.lang)
  tools_exists = path.exists(tools_path)

  if not tools_exists:
    if not ARGS.dev and dotfiles_exists:
      rmtree(dotfiles_path, ignore_errors=True)

    print(f"Unsupported language: {ARGS.lang}")
    exit(1)

  setup_path = path.join(dotfiles_path, "bin/setup")
  cmd = ["python ."]

  if ARGS.dev:
    cmd.append("--dev")

  if ARGS.lang != "":
    cmd.append(f"--lang={ARGS.lang}")

  if ARGS.home != "":
    cmd.append(f"--home={ARGS.home}")

  print(" ".join(cmd))
  call(" ".join(cmd), shell=True, cwd=setup_path)
