#!/usr/bin/env python
import os
import sys
import json
import argparse
from subprocess import run, call
from os import environ, mkdir, path, access, remove, listdir
from shutil import copyfile
from time import time

HOME = environ["HOME"]
PATH = environ["PATH"]
BIN = path.join(HOME, ".local/bin")
ZSHRC = path.join(HOME, ".zshrc")
ZSHRC_BACKUP = path.join(HOME, f".zshrc.{int(time())}.backup")

installed = lambda pkg: True if run(
  f"zsh -i -c \"which {pkg}\"",
  shell=True,
  capture_output=True,
).returncode == 0 else False

parser = argparse.ArgumentParser(description="Dotfiles install script")
parser.add_argument("-D", "--dev", action="store_true", dest='dev', default=False)
parser.add_argument("-L", "--lang", action="store", dest="lang", default="go")
parser.add_argument("-I", "--install", action="store", dest="install", default=".dotfiles", type=str)

args = parser.parse_args()
dev = args.dev
lang = args.lang
tools_builder = f"tools/{lang}/build"
install_path = path.join(HOME, args.install)
tools_path = path.join(install_path, tools_builder)
tools_packages = path.join(install_path, "packages")
dotfiles_json = path.join(install_path, "dotfiles.json")
build_path = path.join(install_path, ".build")
build_home = path.join(install_path, ".build/home")
build_config = path.join(build_home, ".dotfiles.build.json")
build_json = {
  "version": "",
  "binary": "",
  "source": "",
  "symlink": "",
  "language": "",
}

if __name__ == "__main__":
  repo="https://github.com/jgttech/dotfiles.v2.git"
  deps=["git", "jq", "stow", "omz", "nvm", args.lang]
  missing=[]

  if not path.exists(tools_path):
    print(f"Language not supported: {lang}")
    sys.exit(1)

  for dep in deps:
    if not installed(dep):
      missing.append(dep)

  if len(missing):
    print("Missing required dependencies:")
    for dep in missing:
      print(f"> {dep}")
    sys.exit(1)

  if BIN not in PATH:
    for dir in PATH.split(":"):
      if access(dir, os.W_OK | os.R_OK) and "sbin" not in dir:
        BIN = dir
        break

  if not dev:
    call(f"git clone {repo} {args.install}", shell=True)

  if not path.exists(install_path):
    print("Failed to clone")
    sys.exit(1)

  if path.exists(ZSHRC):
    copyfile(ZSHRC, ZSHRC_BACKUP)
    remove(ZSHRC)

  with open(dotfiles_json, "r") as cfg:
    data = json.load(cfg)

    build_json['version'] = data['version']
    build_json['binary'] = data['binary']

  call(f"python {tools_builder} --binary={build_json['binary']}", cwd=install_path, shell=True)

  if not path.exists(build_home):
    mkdir(build_home)

  with open(build_config, "w") as state:
    build_json['source'] = install_path
    build_json['language'] = lang
    build_json['symlink'] = BIN
    json.dump(build_json, state, indent=2)

  call(f"stow -t {BIN} bin", shell=True, cwd=build_path)

  stow_packages = []

  for pkg in listdir(tools_packages):
    if path.isdir(path.join(tools_packages, pkg)):
      stow_packages.append(pkg)

  if len(stow_packages):
    call(f"stow -t {HOME} {" ".join(stow_packages)}", shell=True, cwd=tools_packages)
