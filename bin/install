#!/usr/bin/env python
from sys import exit
from os import path, environ
from argparse import ArgumentParser
from subprocess import run, call

def installed(pkg: str) -> bool:
  return not bool(run(f"zsh -i -c \"which {pkg}\"", shell=True, capture_output=True).returncode)

parser = ArgumentParser(description="Dotfiles install script")
parser.add_argument("-D", "--dev", action="store_true", dest='dev', default=False)
parser.add_argument("-L", "--lang", action="store", dest="lang", default="go")
parser.add_argument("-P", "--path", action="store", dest="path", default=".dotfiles")

if __name__ == "__main__":
  HOME = environ["HOME"]
  ARGS = parser.parse_args()
  REPO="https://github.com/jgttech/dotfiles.v2.git"
  DEPS=["foo", "git", "jq", "stow", "omz", "nvm", ARGS.lang]
  MISSING=[]

  dotfiles = path.join(HOME, ARGS.path)
  exists = path.exists(dotfiles)
  cwd = path.join(dotfiles, "bin/setup")

  # Check for missing system dependencies.
  for dep in DEPS:
    if not installed(dep):
      MISSING.append(dep)

  # If there are missing system dependencies
  # then we can't install the dotfiles.
  if len(MISSING):
    print("Missing required dependencies:")
    for dep in MISSING:
      print(f"> {dep}")
    exit(1)

  # If there is no installation (and we are not
  # running in development) clone the repo into
  # the dotfiles path. Otherwise, if it does exist
  # pull the latest, to make sure we are working
  # with the latest version.
  if not exists and not ARGS.dev:
    call(f"git clone {REPO} {ARGS.install}", shell=True)
  elif exists:
    call(f"git pull", shell=True, cwd=dotfiles)

  if not exists:
    print(f"Unable to install dotfiles: {dotfiles}")
    exit(1)

  # call(f"python .", shell=True, cwd=cwd)
